package main

import (
	"fmt"
)

/*
Key Scheduling
RC4 uses a variable-length key (typically between 40 and 256 bits).
The first step is to initialize two arrays,S (state) and T (temporary),
both of which are 256 bytes long. These arrays are filled with values
from 0 to 255 in ascending order.
*/
func KSA(key []byte) []byte {
	s := make([]byte, 256)
	for i := 0; i < 256; i++ {
		s[i] = byte(i)
	}
	j := 0
	for i := 0; i < 256; i++ {
		j = (j + int(key[i%len(key)]) + int(s[i])) % 256
		s[i], s[j] = s[j], s[i]
	}
	return s
}

/*
Pseudo-Random Generation:
Generate a pseudo-random stream of bytes, which is XORed with the plaintext to produce the ciphertext.
To generate this stream, the algorithm uses two pointers, i and j, which are initially set to 0.
*/
func PRGA(s []byte, plaintext []byte) []byte {
	i, j := 0, 0
	key := make([]byte, len(plaintext))
	for k := 0; k < len(plaintext); k++ {
		i = (i + 1) % 256
		j = (j + int(s[i])) % 256
		s[i], s[j] = s[j], s[i]
		key[k] = s[(int(s[i])+int(s[j]))%256]
	}
	return key
}

/*
Encryption/Decryption:
To encrypt data, you XOR the plaintext with the keystream generated by RC4.
To decrypt the data, you XOR the ciphertext with the same keystream,
which will produce the original plaintext.
*/
func RC4(key []byte, plaintext []byte) []byte {
	s := KSA(key)
	keyStream := PRGA(s, plaintext)
	ciphertext := make([]byte, len(plaintext))
	for i := 0; i < len(plaintext); i++ {
		ciphertext[i] = plaintext[i] ^ keyStream[i]
	}
	return ciphertext
}

func main() {
	key := []byte("MySecretKey")
	plaintext := []byte("Hello, RC4!")

	// Encryption
	ciphertext := RC4(key, plaintext)
	fmt.Printf("Ciphertext: %x\n", ciphertext)

	// Decryption (using the same key)
	decrypted := RC4(key, ciphertext)
	fmt.Printf("Decrypted: %s\n", decrypted)
}
